[1mdiff --git a/ObjectPool/Object_Pool.cpp b/ObjectPool/Object_Pool.cpp[m
[1mnew file mode 100644[m
[1mindex 0000000..d261763[m
[1m--- /dev/null[m
[1m+++ b/ObjectPool/Object_Pool.cpp[m
[36m@@ -0,0 +1,80 @@[m
[32m+[m[32m#include <iostream>[m
[32m+[m[32m#include <vector>[m
[32m+[m
[32m+[m[32musing namespace std;[m
[32m+[m
[32m+[m[32mclass Ave {[m
[32m+[m[32mpublic:[m
[32m+[m[32m    Ave() {[m
[32m+[m[32m        cout << "Ave creada" << endl;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    ~Ave() {[m
[32m+[m[32m        cout << "Ave destruida" << endl;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    void Volar() {[m
[32m+[m[32m        // Lógica para volar[m
[32m+[m[32m        cout << "Ave volando" << endl;[m
[32m+[m[32m    }[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32mclass ObjectPool {[m
[32m+[m[32mprivate:[m
[32m+[m[32m    vector<Ave*> avesDisponibles;[m
[32m+[m[32m    vector<Ave*> avesEnUso;[m
[32m+[m
[32m+[m[32mpublic:[m
[32m+[m[32m    ObjectPool(int size) {[m
[32m+[m[32m        for (int i = 0; i < size; i++) {[m
[32m+[m[32m            avesDisponibles.push_back(new Ave());[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    ~ObjectPool() {[m
[32m+[m[32m        for (auto ave : avesDisponibles) {[m
[32m+[m[32m            delete ave;[m
[32m+[m[32m        }[m
[32m+[m[32m        for (auto ave : avesEnUso) {[m
[32m+[m[32m            delete ave;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    Ave* ObtenerAve() {[m
[32m+[m[32m        if (avesDisponibles.empty()) {[m
[32m+[m[32m            return nullptr;[m
[32m+[m[32m        }[m
[32m+[m[32m        Ave* ave = avesDisponibles.back();[m
[32m+[m[32m        avesDisponibles.pop_back();[m
[32m+[m[32m        avesEnUso.push_back(ave);[m
[32m+[m[32m        return ave;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    void LiberarAve(Ave* ave) {[m
[32m+[m[32m        for (int i = 0; i < avesEnUso.size(); i++) {[m
[32m+[m[32m            if (avesEnUso[i] == ave) {[m
[32m+[m[32m                avesEnUso.erase(avesEnUso.begin() + i);[m
[32m+[m[32m                avesDisponibles.push_back(ave);[m
[32m+[m[32m                break;[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32mint main() {[m
[32m+[m[32m    int tamanoMaximo = 5;[m
[32m+[m[32m    ObjectPool pool(tamanoMaximo);[m
[32m+[m
[32m+[m[32m    // Simulación del juego[m
[32m+[m[32m    for (int i = 0; i < 8; i++) {[m
[32m+[m[32m        Ave* ave = pool.ObtenerAve();[m
[32m+[m[32m        if (ave != nullptr) {[m
[32m+[m[32m            ave->Volar();[m
[32m+[m[32m            pool.LiberarAve(ave);[m
[32m+[m[32m        } else {[m
[32m+[m[32m            cout << "No hay aves disponibles en el pool" << endl;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    return 0;[m
[32m+[m[32m}[m
[1mdiff --git a/Object_Pool.cpp b/Object_Pool.cpp[m
[1mdeleted file mode 100644[m
[1mindex e69de29..0000000[m
